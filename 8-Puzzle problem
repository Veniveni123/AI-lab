from collections import deque

goal_state = [[1,2,3],[4,5,6],[7,8,0]]

def is_goal(state):
    return state == goal_state

def get_neighbors(state):
    neighbors = []
    x, y = next((i, j) for i in range(3) for j in range(3) if state[i][j] == 0)
    directions = [(-1,0),(1,0),(0,-1),(0,1)]
    for dx, dy in directions:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

def bfs(start_state):
    queue = deque([(start_state, [])])
    visited = set()
    while queue:
        current, path = queue.popleft()
        state_tuple = tuple(map(tuple, current))
        if state_tuple in visited:
            continue
        visited.add(state_tuple)
        if is_goal(current):
            return path + [current]
        for neighbor in get_neighbors(current):
            queue.append((neighbor, path + [current]))
    return None

start_state = [[1,2,3],[4,0,6],[7,5,8]]
solution = bfs(start_state)
for step in solution:
    for row in step:
        print(row)
    print()
